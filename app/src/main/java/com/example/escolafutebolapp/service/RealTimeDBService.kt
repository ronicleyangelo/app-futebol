package com.example.escolafutebolapp.service

import com.example.escolafutebolapp.models.User
import com.google.firebase.Firebase
import com.google.firebase.auth.auth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.database
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

object RealtimeDBService {

    private val database = FirebaseDatabase.getInstance()
    private val usersRef = database.getReference("users")

    /**
     * Salva ou atualiza um usu√°rio no Realtime Database
     */
    suspend fun saveUser(user: User) {
        try {
            usersRef.child(user.uid).setValue(user).await()
            println("‚úÖ Usu√°rio salvo com sucesso: ${user.nome}")
        } catch (e: Exception) {
            println("‚ùå Erro ao salvar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Busca um usu√°rio pelo UID (ID do Firebase)
     */
    suspend fun getUser(uid: String): User? {
        return try {
            val snapshot = usersRef.child(uid).get().await()
            snapshot.getValue(User::class.java)
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar usu√°rio: ${e.message}")
            null
        }
    }

    /**
     * Busca um usu√°rio pelo nome
     * Percorre todos os usu√°rios para encontrar o nome correspondente
     */
    suspend fun getUserByName(nome: String): User? = suspendCoroutine { continuation ->
        usersRef.orderByChild("nome")
            .equalTo(nome)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        if (snapshot.exists()) {
                            // Pega o primeiro usu√°rio encontrado
                            val userSnapshot = snapshot.children.firstOrNull()
                            val user = userSnapshot?.getValue(User::class.java)
                            continuation.resume(user)
                        } else {
                            continuation.resume(null)
                        }
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar dados do usu√°rio: ${e.message}")
                        continuation.resume(null)
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rio por nome: ${error.message}")
                    continuation.resumeWithException(error.toException())
                }
            })
    }

    /**
     * Busca um usu√°rio pelo email
     */
    suspend fun getUserByEmail(email: String): User? = suspendCoroutine { continuation ->
        usersRef.orderByChild("email")
            .equalTo(email)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        if (snapshot.exists()) {
                            val userSnapshot = snapshot.children.firstOrNull()
                            val user = userSnapshot?.getValue(User::class.java)
                            continuation.resume(user)
                        } else {
                            continuation.resume(null)
                        }
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar dados do usu√°rio: ${e.message}")
                        continuation.resume(null)
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rio por email: ${error.message}")
                    continuation.resumeWithException(error.toException())
                }
            })
    }

    /**
     * Verifica se um email est√° dispon√≠vel
     */
    suspend fun isEmailAvailable(email: String): Boolean {
        return getUserByEmail(email) == null
    }

    /**
     * Atualiza campos espec√≠ficos de um usu√°rio
     */
    suspend fun updateUser(uid: String, updates: Map<String, Any>) {
        try {
            usersRef.child(uid).updateChildren(updates).await()
            println("‚úÖ Usu√°rio atualizado com sucesso")
        } catch (e: Exception) {
            println("‚ùå Erro ao atualizar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Deleta um usu√°rio
     */
    suspend fun deleteUser(uid: String) {
        try {
            usersRef.child(uid).removeValue().await()
            println("‚úÖ Usu√°rio deletado com sucesso")
        } catch (e: Exception) {
            println("‚ùå Erro ao deletar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Busca todos os usu√°rios (use com cuidado em produ√ß√£o)
     */
    suspend fun getAllUsers(): List<User> {
        return try {
            val snapshot = usersRef.get().await()
            snapshot.children.mapNotNull { it.getValue(User::class.java) }
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar todos os usu√°rios: ${e.message}")
            emptyList()
        }
    }

    /**
     * Busca usu√°rios por tipo (aluno, professor, admin)
     */
    suspend fun getUsersByType(tipo: String): List<User> = suspendCoroutine { continuation ->
        usersRef.orderByChild("tipo_usuario")
            .equalTo(tipo)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        val users = snapshot.children.mapNotNull {
                            it.getValue(User::class.java)
                        }
                        continuation.resume(users)
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar usu√°rios: ${e.message}")
                        continuation.resume(emptyList())
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rios por tipo: ${error.message}")
                    continuation.resume(emptyList())
                }
            })
    }

    /**
     * Busca apenas usu√°rios ativos
     */
    suspend fun getActiveUsers(): List<User> = suspendCoroutine { continuation ->
        usersRef.orderByChild("ativo")
            .equalTo(true)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        val users = snapshot.children.mapNotNull {
                            it.getValue(User::class.java)
                        }
                        continuation.resume(users)
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar usu√°rios: ${e.message}")
                        continuation.resume(emptyList())
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rios ativos: ${error.message}")
                    continuation.resume(emptyList())
                }
            })
    }

    // No seu RealtimeDBService, adicione este m√©todo:
    suspend fun getUserByUsername(username: String): User? {
        return withContext(Dispatchers.IO) {
            try {
                val database = Firebase.database.reference
                val snapshot = database.child("users")
                    .orderByChild("nome")
                    .equalTo(username)
                    .get()
                    .await()

                if (snapshot.exists()) {
                    for (child in snapshot.children) {
                        return@withContext child.getValue(User::class.java)
                    }
                }
                null
            } catch (e: Exception) {
                println("Erro ao buscar usu√°rio por username: ${e.message}")
                null
            }
        }
    }


    // No RealtimeDBService, adicione este m√©todo:
    /**
     * Cria um usu√°rio admin padr√£o se n√£o existir
     */
    suspend fun createDefaultAdminIfNotExists() {
        try {
            val adminEmail = "admin@escolafutebol.com"
            val adminPassword = "Admin123@" // Senha padr√£o forte
            val existingAdmin = getUserByEmail(adminEmail)

            if (existingAdmin == null) {
                // Cria o usu√°rio admin padr√£o
                val adminUser = User(
                    uid = "default_admin_uid", // UID fixo para o admin padr√£o
                    nome = "Administrador",
                    email = adminEmail,
                    username = "admin",
                    tipo_usuario = "admin",
                    data_criacao = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault()).format(java.util.Date()),
                    senha_provisoria = false, // ‚úÖ AGORA √â FALSE - SENHA DEFINIDA
                    ativo = true
                )

                // Salva o admin no banco
                usersRef.child(adminUser.uid).setValue(adminUser).await()
                println("‚úÖ Usu√°rio admin padr√£o criado com sucesso!")
                println("üìß Email: $adminEmail")
                println("üë§ Username: admin")
                println("üîë Senha: $adminPassword")
                println("üîì Senha provis√≥ria: false")

                // ‚úÖ AGORA TAMB√âM CRIA NO FIREBASE AUTHENTICATION
                createAdminInFirebaseAuth(adminEmail, adminPassword)

            } else {
                println("‚úÖ Usu√°rio admin j√° existe no banco")
            }
        } catch (e: Exception) {
            println("‚ùå Erro ao criar usu√°rio admin padr√£o: ${e.message}")
        }
    }

    private suspend fun createAdminInFirebaseAuth(email: String, password: String) {
        try {
            // Importe o Firebase Auth no topo do arquivo
            // import com.google.firebase.auth.FirebaseAuth
            // import com.google.firebase.auth.ktx.auth
            // import com.google.firebase.ktx.Firebase

            val auth = Firebase.auth

            // Verifica se j√° existe no Auth
            val result = auth.createUserWithEmailAndPassword(email, password).await()

            println("‚úÖ Admin criado no Firebase Authentication: ${result.user?.uid}")
        } catch (e: Exception) {
            when {
                e.message?.contains("already exists") == true -> {
                    println("‚ÑπÔ∏è Admin j√° existe no Firebase Authentication")
                }
                e.message?.contains("already in use") == true -> {
                    println("‚ÑπÔ∏è Email do admin j√° est√° em uso no Firebase Authentication")
                }
                else -> {
                    println("‚ùå Erro ao criar admin no Firebase Auth: ${e.message}")
                }
            }
        }
    }
    /**
     * Verifica se existe pelo menos um usu√°rio admin no sistema
     */
    suspend fun hasAnyAdmin(): Boolean {
        return try {
            val admins = getUsersByType("admin")
            admins.isNotEmpty()
        } catch (e: Exception) {
            println("‚ùå Erro ao verificar admins: ${e.message}")
            false
        }
    }


}