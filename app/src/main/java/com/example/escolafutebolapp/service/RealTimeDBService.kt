package com.example.escolafutebolapp.service

import com.example.escolafutebolapp.models.User
import com.google.firebase.Firebase
import com.google.firebase.auth.auth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.database
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

object RealtimeDBService {

    private val database = FirebaseDatabase.getInstance()
    private val usersRef = database.getReference("users")

    /**
     * ‚úÖ FUN√á√ÉO NOVA: Busca o usu√°rio atual logado no Firebase Auth
     */
    suspend fun getCurrentUser(): User? {
        return try {
            val firebaseUser = Firebase.auth.currentUser
            if (firebaseUser != null) {
                println("üîç Buscando usu√°rio atual no Realtime Database: ${firebaseUser.uid}")
                val user = getUser(firebaseUser.uid)
                if (user != null) {
                    println("‚úÖ Usu√°rio atual encontrado: ${user.nome} (${user.tipo_usuario})")
                } else {
                    println("‚ö†Ô∏è Usu√°rio do Auth n√£o encontrado no Realtime Database")
                }
                user
            } else {
                println("‚ÑπÔ∏è Nenhum usu√°rio logado no Firebase Auth")
                null
            }
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar usu√°rio atual: ${e.message}")
            e.printStackTrace()
            null
        }
    }

    /**
     * M√©todo para verificar admin espec√≠fico por email
     */
    suspend fun checkAdminExists(email: String): Boolean {
        return try {
            val admin = getUserByEmail(email)
            val exists = admin != null
            println("üîç Verificando admin $email: ${if (exists) "EXISTE" else "N√ÉO EXISTE"}")
            exists
        } catch (e: Exception) {
            println("‚ùå Erro ao verificar admin $email: ${e.message}")
            false
        }
    }

    /**
     * ‚úÖ FUN√á√ÉO NOVA: Busca o usu√°rio atual com listener em tempo real
     */
    fun getCurrentUserRealtime(onUserChanged: (User?) -> Unit) {
        val firebaseUser = Firebase.auth.currentUser
        if (firebaseUser != null) {
            usersRef.child(firebaseUser.uid)
                .addValueEventListener(object : ValueEventListener {
                    override fun onDataChange(snapshot: DataSnapshot) {
                        try {
                            val user = snapshot.getValue(User::class.java)
                            if (user != null) {
                                println("üîÑ Usu√°rio atualizado em tempo real: ${user.nome}")
                            }
                            onUserChanged(user)
                        } catch (e: Exception) {
                            println("‚ùå Erro ao processar usu√°rio em tempo real: ${e.message}")
                            onUserChanged(null)
                        }
                    }

                    override fun onCancelled(error: DatabaseError) {
                        println("‚ùå Listener de usu√°rio cancelado: ${error.message}")
                        onUserChanged(null)
                    }
                })
        } else {
            onUserChanged(null)
        }
    }

    /**
     * ‚úÖ FUN√á√ÉO NOVA: Verifica se o usu√°rio atual tem permiss√£o de admin/tecnico
     */
    suspend fun currentUserCanEdit(): Boolean {
        return try {
            val currentUser = getCurrentUser()
            val canEdit = currentUser?.tipo_usuario == "admin" || currentUser?.tipo_usuario == "tecnico"
            println("üîê Permiss√£o de edi√ß√£o: ${if (canEdit) "PERMITIDO" else "NEGADO"} para ${currentUser?.nome}")
            canEdit
        } catch (e: Exception) {
            println("‚ùå Erro ao verificar permiss√µes: ${e.message}")
            false
        }
    }

    /**
     * ‚úÖ FUN√á√ÉO NOVA: Atualiza dados do usu√°rio atual
     */
    suspend fun updateCurrentUser(updates: Map<String, Any>): Boolean {
        return try {
            val firebaseUser = Firebase.auth.currentUser
            if (firebaseUser != null) {
                updateUser(firebaseUser.uid, updates)
                true
            } else {
                println("‚ö†Ô∏è Nenhum usu√°rio logado para atualizar")
                false
            }
        } catch (e: Exception) {
            println("‚ùå Erro ao atualizar usu√°rio atual: ${e.message}")
            false
        }
    }

    /**
     * Salva ou atualiza um usu√°rio no Realtime Database
     */
    suspend fun saveUser(user: User) {
        try {
            usersRef.child(user.uid).setValue(user).await()
            println("‚úÖ Usu√°rio salvo com sucesso: ${user.nome}")
        } catch (e: Exception) {
            println("‚ùå Erro ao salvar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Busca um usu√°rio pelo UID (ID do Firebase)
     */
    suspend fun getUser(uid: String): User? {
        return try {
            val snapshot = usersRef.child(uid).get().await()
            snapshot.getValue(User::class.java)
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar usu√°rio: ${e.message}")
            null
        }
    }

    /**
     * Busca um usu√°rio pelo nome
     * Percorre todos os usu√°rios para encontrar o nome correspondente
     */
    suspend fun getUserByName(nome: String): User? = suspendCoroutine { continuation ->
        usersRef.orderByChild("nome")
            .equalTo(nome)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        if (snapshot.exists()) {
                            // Pega o primeiro usu√°rio encontrado
                            val userSnapshot = snapshot.children.firstOrNull()
                            val user = userSnapshot?.getValue(User::class.java)
                            continuation.resume(user)
                        } else {
                            continuation.resume(null)
                        }
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar dados do usu√°rio: ${e.message}")
                        continuation.resume(null)
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rio por nome: ${error.message}")
                    continuation.resumeWithException(error.toException())
                }
            })
    }

    /**
     * Busca um usu√°rio pelo email
     */
    suspend fun getUserByEmail(email: String): User? = suspendCoroutine { continuation ->
        usersRef.orderByChild("email")
            .equalTo(email)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        if (snapshot.exists()) {
                            val userSnapshot = snapshot.children.firstOrNull()
                            val user = userSnapshot?.getValue(User::class.java)
                            continuation.resume(user)
                        } else {
                            continuation.resume(null)
                        }
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar dados do usu√°rio: ${e.message}")
                        continuation.resume(null)
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rio por email: ${error.message}")
                    continuation.resumeWithException(error.toException())
                }
            })
    }

    /**
     * Verifica se um email est√° dispon√≠vel
     */
    suspend fun isEmailAvailable(email: String): Boolean {
        return getUserByEmail(email) == null
    }

    /**
     * Atualiza campos espec√≠ficos de um usu√°rio
     */
    suspend fun updateUser(uid: String, updates: Map<String, Any>) {
        try {
            usersRef.child(uid).updateChildren(updates).await()
            println("‚úÖ Usu√°rio atualizado com sucesso")
        } catch (e: Exception) {
            println("‚ùå Erro ao atualizar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Deleta um usu√°rio
     */
    suspend fun deleteUser(uid: String) {
        try {
            usersRef.child(uid).removeValue().await()
            println("‚úÖ Usu√°rio deletado com sucesso")
        } catch (e: Exception) {
            println("‚ùå Erro ao deletar usu√°rio: ${e.message}")
            throw e
        }
    }

    /**
     * Busca todos os usu√°rios (use com cuidado em produ√ß√£o)
     */
    suspend fun getAllUsers(): List<User> {
        return try {
            val snapshot = usersRef.get().await()
            snapshot.children.mapNotNull { it.getValue(User::class.java) }
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar todos os usu√°rios: ${e.message}")
            emptyList()
        }
    }

    /**
     * Busca usu√°rios por tipo (aluno, professor, admin)
     */
    suspend fun getUsersByType(tipo: String): List<User> = suspendCoroutine { continuation ->
        usersRef.orderByChild("tipo_usuario")
            .equalTo(tipo)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        val users = snapshot.children.mapNotNull {
                            it.getValue(User::class.java)
                        }
                        continuation.resume(users)
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar usu√°rios: ${e.message}")
                        continuation.resume(emptyList())
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rios por tipo: ${error.message}")
                    continuation.resume(emptyList())
                }
            })
    }

    /**
     * Busca apenas usu√°rios ativos
     */
    suspend fun getActiveUsers(): List<User> = suspendCoroutine { continuation ->
        usersRef.orderByChild("ativo")
            .equalTo(true)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    try {
                        val users = snapshot.children.mapNotNull {
                            it.getValue(User::class.java)
                        }
                        continuation.resume(users)
                    } catch (e: Exception) {
                        println("‚ùå Erro ao processar usu√°rios: ${e.message}")
                        continuation.resume(emptyList())
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    println("‚ùå Erro ao buscar usu√°rios ativos: ${error.message}")
                    continuation.resume(emptyList())
                }
            })
    }

    /**
     * Busca usu√°rio pelo username (vers√£o corrigida)
     */
    suspend fun getUserByUsername(username: String): User? {
        return try {
            println("üîç Buscando usu√°rio por username: '$username'")

            val database = Firebase.database.reference
            val usersRef = database.child("users")

            val dataSnapshot = withContext(Dispatchers.IO) {
                usersRef.get().await()
            }

            println("üìä Total de usu√°rios no banco: ${dataSnapshot.children.count()}")

            var userFound: User? = null
            dataSnapshot.children.forEach { snapshot ->
                try {
                    val user = snapshot.getValue(User::class.java)
                    if (user != null) {
                        println("üë§ Verificando usu√°rio: username='${user.username}' == '$username'")
                        if (user.username?.equals(username, ignoreCase = true) == true) {
                            userFound = user
                            println("‚úÖ Usu√°rio encontrado: ${user.nome} (${user.email})")
                            return@forEach
                        }
                    }
                } catch (e: Exception) {
                    println("‚ö†Ô∏è Erro ao processar usu√°rio: ${e.message}")
                }
            }

            if (userFound == null) {
                println("‚ùå Nenhum usu√°rio encontrado com username: '$username'")
            }

            userFound
        } catch (e: Exception) {
            println("‚ùå Erro ao buscar usu√°rio por username '$username': ${e.message}")
            e.printStackTrace()
            null
        }
    }

    // No RealtimeDBService, atualize o m√©todo createDefaultAdminIfNotExists:

    /**
     * Cria um usu√°rio admin padr√£o se n√£o existir
     */
    suspend fun createDefaultAdminIfNotExists() {
        try {
            val adminEmail = "admin@escolafutebol.com"

            // ‚úÖ PRIMEIRO VERIFICA SE J√Å EXISTE NO BANCO
            val existingAdmin = getUserByEmail(adminEmail)

            if (existingAdmin == null) {
                println("üîç Admin n√£o encontrado no banco. Criando novo admin...")

                // Cria o usu√°rio admin padr√£o
                val adminUser = User(
                    uid = "default_admin_uid", // UID fixo para o admin padr√£o
                    nome = "Administrador",
                    email = adminEmail,
                    username = "admin",
                    tipo_usuario = "admin",
                    data_criacao = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault()).format(java.util.Date()),
                    senha_provisoria = false,
                    ativo = true
                )

                // Salva o admin no banco
                usersRef.child(adminUser.uid).setValue(adminUser).await()
                println("‚úÖ Usu√°rio admin padr√£o criado com sucesso!")
                println("üìß Email: $adminEmail")
                println("üë§ Username: admin")
                println("üîì Senha provis√≥ria: false")

                // ‚úÖ TENTA CRIAR NO FIREBASE AUTH (se n√£o existir)
                createAdminInFirebaseAuth(adminEmail, "Admin123@")

            } else {
                println("‚úÖ Usu√°rio admin j√° existe no banco. Nada a fazer.")
                println("üìß Email: ${existingAdmin.email}")
                println("üë§ Nome: ${existingAdmin.nome}")
                println("üîë Tipo: ${existingAdmin.tipo_usuario}")
            }
        } catch (e: Exception) {
            println("‚ùå Erro ao verificar/criar usu√°rio admin padr√£o: ${e.message}")
            e.printStackTrace()
        }
    }

    private suspend fun createAdminInFirebaseAuth(email: String, password: String) {
        try {
            val auth = Firebase.auth

            // ‚úÖ PRIMEIRO TENTA LOGIN PARA VER SE J√Å EXISTE
            try {
                val result = auth.signInWithEmailAndPassword(email, password).await()
                println("‚ÑπÔ∏è Admin j√° existe no Firebase Authentication: ${result.user?.uid}")
                return // J√° existe, n√£o precisa criar
            } catch (signInException: Exception) {
                // Se falhou no login, tenta criar
                when {
                    signInException.message?.contains("invalid credential") == true -> {
                        println("üîç Admin n√£o existe no Auth. Criando...")
                        val createResult = auth.createUserWithEmailAndPassword(email, password).await()
                        println("‚úÖ Admin criado no Firebase Authentication: ${createResult.user?.uid}")
                    }
                    signInException.message?.contains("user not found") == true -> {
                        println("üîç Admin n√£o existe no Auth. Criando...")
                        val createResult = auth.createUserWithEmailAndPassword(email, password).await()
                        println("‚úÖ Admin criado no Firebase Authentication: ${createResult.user?.uid}")
                    }
                    else -> {
                        println("‚ö†Ô∏è Erro ao verificar admin no Auth: ${signInException.message}")
                    }
                }
            }
        } catch (e: Exception) {
            when {
                e.message?.contains("already exists") == true -> {
                    println("‚ÑπÔ∏è Admin j√° existe no Firebase Authentication")
                }
                e.message?.contains("already in use") == true -> {
                    println("‚ÑπÔ∏è Email do admin j√° est√° em uso no Firebase Authentication")
                }
                else -> {
                    println("‚ùå Erro ao criar admin no Firebase Auth: ${e.message}")
                }
            }
        }
    }

    /**
     * M√©todo adicional para verificar se existe algum admin no sistema
     */
    suspend fun hasAnyAdmin(): Boolean {
        return try {
            val admins = getUsersByType("admin")
            println("üîç Verificando admins no sistema: ${admins.size} encontrados")
            admins.isNotEmpty()
        } catch (e: Exception) {
            println("‚ùå Erro ao verificar admins: ${e.message}")
            false
        }
    }

}