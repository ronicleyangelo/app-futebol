package com.example.escolafutebolapp.uitls

import android.app.Application
import android.util.Log
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import com.example.escolafutebolapp.service.RealtimeDBService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class AppLifecycleObserver(private val application: Application) : DefaultLifecycleObserver {

    companion object {
        private const val TAG = "AppLifecycleObserver"
        private const val DEFAULT_ADMIN_EMAIL = "admin@escolafutebol.com"
    }

    override fun onCreate(owner: LifecycleOwner) {
        super.onCreate(owner)
        createDefaultAdmin()
    }

    private fun createDefaultAdmin() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                Log.d(TAG, "üéØ Iniciando verifica√ß√£o do admin padr√£o...")

                // ‚úÖ VERIFICA SE O ADMIN PADR√ÉO ESPEC√çFICO EXISTE
                val adminExists = RealtimeDBService.checkAdminExists(DEFAULT_ADMIN_EMAIL)
                Log.d(TAG, "üîç Admin padr√£o existe? $adminExists")

                // ‚úÖ S√ì CRIA SE N√ÉO EXISTIR
                if (!adminExists) {
                    Log.d(TAG, "üöÄ Criando admin padr√£o...")
                    RealtimeDBService.createDefaultAdminIfNotExists()
                    Log.d(TAG, "‚úÖ Admin criado com sucesso")
                } else {
                    Log.d(TAG, "‚úÖ Admin j√° existe. Nada a fazer.")
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar/criar admin: ${e.message}", e)
            }
        }
    }
}